# measured diskspace used 70Mb
# measured time used: 12 minutes

pre_install() {
  echo "PostGreSQL database 'axum' must exist and configured!"
  pre_upgrade $1 'git-0';
}

post_install() {
  #to be sure all columns are available to v0-to-v1
  psql -U axum < /root/axum_db_v0_to_v1.sql
  post_upgrade $1 'git-0';
}

pre_upgrade() {

  echo "Current date/time: $(date)"
  echo "Be patient, the upgrade may take some minutes..."

  MIN_SIZE=102400
  df_result=$(df | grep '/dev/sda1' | awk '{print $4}')

  if [ $df_result -lt $MIN_SIZE ]
  then
    echo "Not enough diskspace for upgrade, 100M required!"
    echo "running 'pacman -Scc'..."
    pacman -Scc
    df_result=$(df | grep '/dev/sda1' | awk '{print $4}')
    if [ $df_result -lt $MIN_SIZE ]
    then
      echo "database upgrade canceled, manual upgrade database with ./upgrade.pl"
      return 1
    fi
  else
    echo "$df_result of free space"
  fi

  #removed backup-file, use programmed defaults the first time
  rm /var/lib/axum/.backup

  /etc/rc.d/lighttpd stop
  /etc/rc.d/ntpd stop
  /etc/rc.d/crond stop
  /etc/rc.d/axum-engine stop
  /etc/rc.d/axum-learner stop
  /etc/rc.d/axum-address stop
  /etc/rc.d/axum-gateway stop

  #make as much free space as possible
  vacuumdb -af -U postgres

}

post_upgrade() {
  NEW=`echo $1`
  OLD=`echo $2`

  #do db upgrade after files are placed!
  create_perl_script
  ./upgrade.pl $1 $2
  remove_perl_script

  #make sure delete rows are 'removed'
  vacuumdb -af -U postgres

  if [[ "$OLD" =~ git-(.*) ]]
  then
    if [ ${BASH_REMATCH[1]} -lt 8 ]
    then
      if [[ "$NEW" =~ git-(.*) ]]
      then
        if [ ${BASH_REMATCH[1]} -eq 8 ]
        then
          #copy the configuration file
          cp /etc/rc.conf /etc/rc.confsave
          cp /root/rc.conf /etc/rc.conf
          echo "WARNING: old /etc/rc.conf saved as /etc/rc.confsave"
        fi
      fi
    fi
    if [ ${BASH_REMATCH[1]} -lt 9 ]
    then
      if [[ "$NEW" =~ git-(.*) ]]
      then
        if [ ${BASH_REMATCH[1]} -eq 9 ]
        then
          #copy the configuration file
          cp /etc/rc.conf /etc/rc.confsave
          cp /root/rc_processes.conf /etc/rc.conf
          echo "WARNING: old /etc/rc.conf saved as /etc/rc.confsave"
        fi
      fi
    fi
  fi

  /etc/rc.d/axum-gateway start
  /etc/rc.d/axum-address start
  /etc/rc.d/axum-learner start
  /etc/rc.d/axum-engine start
  /etc/rc.d/crond start
  /etc/rc.d/ntpd start
  /etc/rc.d/lighttpd start

  echo "Upgrade finished at date/time: $(date)"
}

function create_perl_script() {
  echo "create upgrade script";

  echo "#!/usr/bin/perl

use strict;
use warnings;
use DBI;

my(\$new, \$old) = @ARGV;

\$new =~ /git-(\d+)/;
my \$new_version = \$1;

\$old =~ /git-(\d+)/;
my \$old_version = \$1;

printf(\"upgrade database from version: \$old_version to version: \$new_version\n\"); $| = 1;

my \$i;

my \$sql = DBI->connect('dbi:Pg:host=localhost;dbname=axum', 'axum', '', {
                          PrintError => 0, RaiseError => 1,
                          AutoCommit => 0, pg_enable_utf8 => 1,});

for (\$i = \$old_version; \$i < \$new_version; \$i++ ) {
  my \$j = \$i+1;

  open IN, \"/root/axum_db_v\${i}_to_v\${j}.sql\";

  my \$query;

  while (<IN>)
  {
    \$query .= "\$_";
  }

  my \$q = \$sql->prepare(\$query);
  \$q->execute();
  \$sql->commit();

  printf(\"Database upgrade version \$i to version \$j done!\n\");
}

\$sql->disconnect();
" > upgrade.pl

chmod +x upgrade.pl

}

function remove_perl_script() {
  echo "remove upgrade script";
  cp upgrade.pl /root/upgrade.pl
  rm upgrade.pl
}

